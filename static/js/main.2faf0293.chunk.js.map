{"version":3,"sources":["components/search.svg","serviceWorker.js","reducers.js","components/SearchBox.js","components/EnhancedTable.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchBox","searchChange","onRequestRobots","class","type","placeholder","onChange","onClick","useStyles","makeStyles","table","minWidth","createData","name","calories","fat","carbs","protein","EnhancedTable","sortRobots","sortRobotsbyYear","deleteItem","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableSortLabel","align","TableBody","map","row","index","key","scope","Title","Year","imdbID","bind","ErrorBoundry","props","state","hasError","info","this","setState","children","Component","App","temp","JSON","parse","stringify","data","sort","a","b","nameA","toLowerCase","nameB","console","log","onRequestSort","i","event","deletedArray","splice","ondeleteRobots","onSearchChange","connect","searchRobots","requestRobots","dispatch","payload","target","value","url","fetch","then","response","json","catch","deleteRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2faf0293.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.f59b0276.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_ROBOTS_SORT,\r\n\tREQUEST_ROBOTS_DELETE\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn { ...state, searchField: action.payload}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: {},\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_SORT:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload })\r\n\t\tcase REQUEST_ROBOTS_DELETE:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\nimport search from './search.svg'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst SearchBox = ({searchChange, onRequestRobots, searchField}) => {\r\n\treturn (\r\n\r\n<div class=\"sb-example-1\">\r\n         <div class=\"search\">\r\n            <input type=\"text\" class=\"searchTerm\" placeholder=\"What are you looking for?\" onChange={searchChange}></input>\r\n            <button type=\"submit\" class=\"searchButton\" onClick={() => onRequestRobots(\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+searchField)}>\r\n              <SearchIcon />\r\n           </button>\r\n         </div>\r\n      </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function EnhancedTable({robots, sortRobots, sortRobotsbyYear, deleteItem}) {\r\n  const classes = useStyles();\r\n return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell><TableSortLabel onClick={sortRobots}>Title </TableSortLabel></TableCell>\r\n            <TableCell align=\"right\"><TableSortLabel onClick={sortRobotsbyYear}>Year </TableSortLabel></TableCell>\r\n            <TableCell align=\"right\">imdbID</TableCell>\r\n            <TableCell align=\"right\">Delete</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {robots.map((row, index) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.Title}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.Year}</TableCell>\r\n              <TableCell align=\"right\">{row.imdbID}</TableCell>\r\n              <TableCell align=\"right\"><button className='deleteBtn' onClick={deleteItem.bind(this, index)}><DeleteIcon /></button></TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oooops</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport SearchBox from '../components/SearchBox';\nimport EnhancedTable from '../components/EnhancedTable';\nimport './App.css';\n\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots, sortRobots, deleteRobots } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: (url) => dispatch(requestRobots(url)),\n\t\tonRequestSort: (temp) => dispatch(sortRobots(temp)),\n\t\tondeleteRobots: (deletedArray) => dispatch(deleteRobots(deletedArray))\n\t}\n}\n\n\nclass App extends Component {\n\tsortRobots = () => {\n\t\tlet temp = JSON.parse(JSON.stringify(this.props.robots));\n\t\ttemp.data.sort(function(a, b){\n\t    \tvar nameA=a.Title.toLowerCase(), nameB=b.Title.toLowerCase()\n\t    \tif (nameA < nameB) //sort string ascending\n\t        \treturn -1 \n\t    \tif (nameA > nameB)\n\t        \treturn 1\n\t    \treturn 0 //default return value (no sorting)\n\t\t})\n\t\tconsole.log(this.props.robots, \"see carefully\")\n\t\tconsole. log(temp, \"temp\")\n\t\tconsole.log(this.props.robots, \"the robots state\")\n\t\tthis.props.onRequestSort(temp)\n\t}\t\n\n\tsortRobotsbyYear = () => {\n\t\tlet temp = JSON.parse(JSON.stringify(this.props.robots));\n\t\ttemp.data.sort(function(a, b){\n\t\t    return a.Year-b.Year\n\t\t})\n\t\tthis.props.onRequestSort(temp)\n\t}\n\n\tdeleteItem = (i, event) => {\n\t\tlet deletedArray = JSON.parse(JSON.stringify(this.props.robots));\n\t    deletedArray.data.splice(i, 1);\n\t\tthis.props.ondeleteRobots(deletedArray)\n  \t}\n\n\trender() {\n\t\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\t\t// const filteredRobots = robots.filter(robot => {\n\t\t\t// \treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t// })\n\t\t\tconsole.log(\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+searchField, \"THE CONCAT \")\n\t\t\t\n\t\t\treturn typeof robots.data === 'undefined' ?\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className=\"f2\">Search Movies</h1>\t\n\t\t\t\t\t<div className='flex justify-center'>\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange} onRequestRobots={this.props.onRequestRobots} searchField={this.props.searchField} />\n\t\t\t\t\t</div>\t\t\t  \t\n\t\t\t  \t</div>\t\n\t\t\t:\n\t\t\t(\n\t\t\t  \t<div className='tc'>\n\t\t\t\t\t<h1 className=\"f2\">Search Movies</h1>\n\t\t\t\t\t<div className='flex justify-center'>\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange} onRequestRobots={this.props.onRequestRobots} searchField={this.props.searchField} />\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t  \t\t\t<EnhancedTable robots={robots.data} sortRobots={this.sortRobots} sortRobotsbyYear={this.sortRobotsbyYear} deleteItem={this.deleteItem}/>\n\t\t\t\t  \t\t</ErrorBoundry>\n\t\t\t\t  \n\t\t\t  \t</div>\n\t\t\t)\n\t\t\t}\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n\tREQUEST_ROBOTS_SORT,\r\n\tREQUEST_ROBOTS_DELETE\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = (url) => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch(url)\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data }))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}\r\n\r\nexport const sortRobots = (sorted) => ({\r\n\ttype: REQUEST_ROBOTS_SORT,\r\n\tpayload: sorted\r\n})\r\n\r\nexport const deleteRobots = (deletedArray) => ({\r\n\ttype: REQUEST_ROBOTS_DELETE,\r\n\tpayload: deletedArray\r\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nexport const REQUEST_ROBOTS_SORT = 'REQUEST_ROBOTS_SORT';\r\n\r\nexport const REQUEST_ROBOTS_DELETE = 'REQUEST_ROBOTS_DELETE';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers'\nimport App from './containers/App';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n  \t\t<App />\n  \t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}